import MySQLdb
import pandas as pd
from collections import OrderedDict
import matplotlib.pyplot as plt
from collections import Counter
import numpy as np
import time

conn = MySQLdb.connect(host = 'localhost', user = 'root', passwd = "*****",
                       db = "orders_db", port = 3306, charset = "utf8")
cur = conn.cursor(cursorclass = MySQLdb.cursors.DictCursor)

symbol_name = raw_input('Please input the symbol that you want to look up:\t')

conn = MySQLdb.connect(host = "******", user = "Chang", passwd = "******",
                       db = "aetos", port = 3306, charset = "utf8")
cur = conn.cursor(cursorclass = MySQLdb.cursors.DictCursor)

cur.execute("select * from orders where Symbol = '%s' and Type = 'buy' or Symbol = '%s' and Type = 'sell'"
            % (symbol_name,symbol_name))

lines = cur.fetchall()

conn = MySQLdb.connect(host = "*****", user = "Chang", passwd = "*****",
                       db = "mt4", port = 3306, charset = "utf8")
cur = conn.cursor(cursorclass = MySQLdb.cursors.DictCursor)
cur.execute("select BID from mt4_prices where SYMBOL ='%s'" % symbol_name)

quote = cur.fetchall()

for quotes in quote:
    current_quote = quotes['BID']

cur.close()
conn.close()


login_list = [line['Login'] for line in lines ]
volume_list = [float(line['Volume']) for line in lines]
type_list = [line['Type'] for line in lines]
price_list = [float(line['OpenPrice']) for line in lines]

lvt_list = [list(i) for i in zip(login_list,type_list,volume_list,price_list)]  

def sort_3(data_list):
  new_data = {}
  for i in range(len(data_list)):
      if (data_list[i][0],data_list[i][1]) not in new_data.keys():
          new_data.update ({(data_list[i][0],data_list[i][1]):(data_list[i][2],data_list[i][3])})
          for j in range(len(data_list)):
              if data_list[i][0] == data_list[j][0] and data_list[i][1] == data_list[j][1] and i !=j:
                  data_list[i][2] = data_list[i][2] + data_list[j][2]
                  data_list[i][3] = (((data_list[i][2] - data_list[j][2]) * data_list[i][3])  + (data_list[j][2] * data_list[j][3])) / (data_list[i][2])              
                  new_data.update ({(data_list[i][0],data_list[i][1]):(data_list[i][2],data_list[i][3])})
  return new_data

lt_v_dict = OrderedDict(sorted((sort_3(lvt_list)).items(),key=lambda t: t[1], reverse = True))

#login_type_volume_dict

row_a = [lt_v_dict.keys()[i][0] for i in range(len(lt_v_dict))]
row_b = [lt_v_dict.keys()[i][1] for i in range(len(lt_v_dict))]
row_c = [lt_v_dict.values()[i][0] for i in range(len(lt_v_dict))]
row_d = [lt_v_dict.values()[i][1] for i in range(len(lt_v_dict))]


conn = MySQLdb.connect(host = 'localhost', user = 'root', passwd = 'Aetos1234',
                       db = 'ar_db', port = 3306, charset = 'utf8')
cur = conn.cursor(cursorclass = MySQLdb.cursors.DictCursor)
IB_list = []
for i in row_a:
    cur.execute("select Agent from live where Login = '%s' union\
                select Agent from livef where Login = '%s' union\
                select Agent from livef2 where Login = '%s' union\
                select Agent from livef3 where Login = '%s' union\
                select Agent from livef5 where Login = '%s' union\
                select Agent from livem where Login = '%s' union\
                select Agent from liveuk where Login = '%s'" % (i,i,i,i,i,i,i)) 
    a = cur.fetchone()
    if not a is None:
        IB_list.append(a['Agent'])
    else:
        IB_list.append('None')

row_e = IB_list



df1 = pd.DataFrame({'Login' : row_a, 'Type' : row_b, 'Volume' : row_c, 'WA Price' : row_d, 'IB' : row_e},
                   columns = ['Login','Type','Volume','WA Price','IB'])

df1.to_excel("%s" % (symbol_name + '_volume_distribution.xlsx'),sheet_name = '%s' % (symbol_name),index = False)

op_b_t,vol_b_t,op_s_t,vol_s_t = ([] for i in range(4))
for line in lines:
    if line['Type'] == 'buy':
        op_b_t.append(line['OpenPrice'])
        vol_b_t.append(line['Volume'])
    else:
        op_s_t.append(line['OpenPrice'])
        vol_s_t.append(line['Volume'])

op_bi = [float(i.encode('utf')) for i in op_b_t]
vol_b = [float(i.encode('utf')) for i in vol_b_t]
op_si = [float(i.encode('utf')) for i in op_s_t]
vol_s = [float(i.encode('utf')) for i in vol_s_t]

vol_b_f,vol_s_f = [float(i.encode('utf')) for i in vol_b_t],[float(i.encode('utf')) for i in vol_s_t]

if 'jpy' in symbol_name or 'JPY' in symbol_name:
    round_figure = 1
elif 'XAU' in symbol_name or 'xau' in symbol_name:
    round_figure = 0
elif 'XAG' in symbol_name or 'xag' in symbol_name:
    round_figure = 2
else:
    round_figure = 3


op_b = [round(i,round_figure) for i in op_bi]
op_s = [round(i,round_figure) for i in op_si]

pricedis_buy = {}
for i in range(len(op_b)):
    if op_b[i] not in pricedis_buy.keys():
            pricedis_buy.update({op_b[i]:vol_b[i]})
            for j in range(len(op_b)):
                if op_b[i] == op_b[j] and i != j:
                    vol_b[i] = vol_b[i] + vol_b[j]
                pricedis_buy.update({op_b[i]:vol_b[i]})

pricedis_sell = {}
for i in range(len(op_s)):
    if op_s[i] not in pricedis_sell.keys():
            pricedis_sell.update({op_s[i]:vol_s[i]})
            for j in range(len(op_s)):
                if op_s[i] == op_s[j] and i != j:
                    vol_s[i] = vol_s[i] + vol_s[j]
                pricedis_sell.update({op_s[i]:vol_s[i]})
                       
def drop_outliers(data,population,m = 2):
    data = [i for i in data if abs(np.mean(population)- i ) < m *np.std(population)]
    return data

def index_loc(n,source):
    i = min(source,key = lambda x:abs(x-n))
    for s,v in list(enumerate(source)):
        if v == i:
            return s 

op_b_t = sorted(pricedis_buy.keys())
op_s_t = sorted(pricedis_sell.keys())

openprice_buy = drop_outliers(op_b_t,op_b,2)
openprice_sell = drop_outliers(op_s_t,op_s,2)

volume_buy = [pricedis_buy[k] for k in openprice_buy]
volume_sell = [pricedis_sell[k] for k in openprice_sell]

openprice_all = sorted(openprice_buy + openprice_sell)

for item,count in Counter(openprice_all).most_common():
    if count != 1:
        openprice_all.remove(item)
        
for i in range(len(openprice_all)):
    if openprice_all[i] not in openprice_buy:
        openprice_buy.insert(i,openprice_all[i])
        volume_buy.insert(i,0)
          
for i in range(len(openprice_all)):
    if openprice_all[i] not in openprice_sell:
        openprice_sell.insert(i,openprice_all[i])
        volume_sell.insert(i,0)

print len(openprice_all)

fig = plt.figure(figsize =(20,10))
x = np.arange(len(openprice_all))
y_buy= np.array(volume_buy)
y_sell = np.array(volume_sell)

number_of_xticks = int(raw_input('Please inpute the number of Xticks you want:\t'))
sp = (len(openprice_all)/ number_of_xticks)
locs = np.arange(len(openprice_all),step = sp)

plt.xlim(0,max(locs))
plt.bar(x, +y_buy,color = 'blue',label = 'Buy')
plt.bar(x, -y_sell,color = 'red', label = 'Sell')

#locs_t = np.arange(len(openprice_all),step = sp).tolist()
#if len(openprice_all) not in locs_t:
#    locs_t.append(len(openprice_all)-1)
#locs = np.asarray(locs_t)

plt.xticks(locs,np.array(openprice_all)[locs], rotation="vertical")
fig.autofmt_xdate()
plt.axvline(x=index_loc(current_quote,openprice_all),ymin = 0, ymax = 1, linewidth = 2, color = 'black',label = 'Current Price')

xmin,xmax = plt.xlim()
ymin,ymax = plt.ylim()

ax = fig.add_subplot(111)
ax.set_title('Position Distribution of %s' % symbol_name,fontsize = 18)
ax.set_xlabel('Open Price',fontsize = 18)
ax.set_ylabel('Volume', fontsize = 18)

#ax.text(xmax-20,ymax-20,"Average Buy Price = %s\nAverage Sell Price = %s\nCurrent Price = %s"
#        % (round(np.mean(op_bi),5),round(np.mean(op_si),5),current_quote),
#        style='italic', bbox={'facecolor':'red', 'alpha':0.5, 'pad':10})

if 'XA' in symbol_name or 'xa' in symbol_name:
    round_figure_2 = 2
elif 'jpy' in symbol_name or 'JPY' in symbol_name:
    round_figure_2 = 3
else:
    round_figure_2 = 4

ax.annotate("Average Buy Price = %s\nTotal Long Position = %s\nAverage Sell Price = %s\nTotal Short Position = %s\nCurrent Price = %s"
            % (round(np.average(op_bi,weights = vol_b_f),round_figure_2),np.sum(vol_b_f),round(np.average(op_si,weights = vol_s_f),round_figure_2),np.sum(vol_s_f),current_quote),
            xy = (1,0),xycoords='axes fraction', fontsize=16,
            horizontalalignment='right', verticalalignment='bottom')


legend = plt.legend(loc = 1,shadow = True, fontsize = 16)

plt.tight_layout()
plt.grid()
plt.show()
