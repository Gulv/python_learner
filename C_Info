from __future__ import division
import MySQLdb
import numpy as np
import random
import re
from time import gmtime, strftime
from datetime import datetime
import matplotlib.pyplot as plt
from collections import Counter
from collections import OrderedDict

conn = MySQLdb.connect(host = 'localhost', user = 'root', passwd = '********',
                       db = 'ctr_db', port = 3306, charset = 'utf8')

cur = conn.cursor(cursorclass = MySQLdb.cursors.DictCursor)

client = raw_input('Please Enter the Client That You Would Like to Check:\t')

full_or_partly = raw_input('Do you want to access this client based on seleted date range? Y/N\t')

if full_or_partly == 'N':
    cur.execute("select * from live where Login = %r union\
            select * from livef where Login = %r union\
            select * from livef2 where Login = %r union\
            select * from livef3 where Login = %r union\
            select * from livem where Login = %r union\
            select * from liveuk where Login = %r " % (client,client,client,client,client,client))

else:
    time_period_s = raw_input('Please Enter the Starting Date:\t')
    time_period_e = raw_input('Please Enter the End Date:\t')
    cur.execute("select * from live where Login = %r and CLose_Time between '%s' and '%s' union\
            select * from livef where Login = %r and CLose_Time between '%s' and '%s' union\
            select * from livef2 where Login = %r and CLose_Time between '%s' and '%s' union\
            select * from livef3 where Login = %r and CLose_Time between '%s' and '%s' union\
            select * from liveuk where Login = %r and CLose_Time between '%s' and '%s' union\
            select * from livem where Login = %r and CLose_Time between '%s' and '%s'" %
            (client,time_period_s + "%",time_period_e + "%",
             client,time_period_s + "%",time_period_e + "%",
             client,time_period_s + "%",time_period_e + "%",
             client,time_period_s + "%",time_period_e + "%",
             client,time_period_s + "%",time_period_e + "%",
             client,time_period_s + "%",time_period_e + "%",))

#cur.execute('select * from client_statement')
lines = cur.fetchall()

#allocation of holding period
holding_period = [round((line['Close_Time']-line['Open_Time']).total_seconds()/60,2)
             for line in lines]
items = (('< 1 min' , len([i for i in holding_period if i <= 1])),
('1 min to 1 hour' , len([i for i in holding_period if 1 < i <= 30])),
('1 hour to 1 day' , len([i for i in holding_period if 60 < i <= 1440])),
('> 1 day', len([i for i in holding_period if 1440 < i])))

profit_list = [float(line['Profit']) for line in lines]



hp_points_dict = dict(zip(holding_period,[(float(line['Points']) /10) for line in lines]))
hp_profit_dict = dict(zip(holding_period,profit_list))

hp_frequency_dict = OrderedDict(items)

symbol_index = [xxxxxx]

volume_index = [[] for i in range(len(symbol_index))]
points_index = [[] for i in range(len(symbol_index))]

for line in lines:
    symbol_filltration = line['Symbol'].partition(".")[0]
    if symbol_filltration in symbol_index:
        volume_index[symbol_index.index(symbol_filltration)].append(line['Volume'])
        points_index[symbol_index.index(symbol_filltration)].append(float(line['Points'])/10)
        
    elif symbol_filltration in ['cocoa','sugar','coffee','cotton','livecattle',\
         'corn' ,'soybeans','wheat','soybeanoil']:
        volume_index[symbol_index.index('agricultural')].append(line['Volume'])
        points_index[symbol_index.index('agricultural')].append(float(line['Points'])/10)                
    else:
        volume_index[symbol_index.index('others')].append(line['Volume'])
        points_index[symbol_index.index('others')].append(float(line['Points'])/10)

for i in range(len(volume_index)):
    volume_index[i] = [sum(float(k.encode('utf')) for k in volume_index[i])]
    #points_index[i] = [sum(float(k.encode('utf')) for k in point_index[i])]

symbol_volume = dict(zip(symbol_index,volume_index))
symbol_points = dict(zip(symbol_index,points_index))

def reform_volume(data_dict):
    for k,v in data_dict.items():
        data_dict.update({k:sum(v)})
        
def sort_dict(data_dict):
    for k,v in data_dict.items():
        if v ==0:
            del data_dict[k]
        elif 100*v < sum(data_dict.values()):
            del data_dict[k]
            
def drop_outliers(data_dict,reflection_dict):
    for k,v in data_dict.items():
            if k not in reflection_dict.keys():
                del data_dict[k]
                
def max_value_tuple(data_dict):
    v = list(data_dict.values())
    k = list(data_dict.keys())
    mk = k[v.index(max(v))]
    return (mk,max(v))

def most_profitable_order_des(raw_data,profit_reference):
    des = []
    for line in raw_data:
        if float(line['Profit']) == max(profit_reference):
            des = [line['Type'],line['Volume'],line['Symbol'].upper(),line['Open_Time']]
    return des
            
        
reform_volume(symbol_volume)
sort_dict(symbol_volume)
sort_dict(hp_frequency_dict)
drop_outliers(symbol_points,symbol_volume)

number_of_profit_orders,number_of_loss_orders,profit_orders_average,loss_orders_average= ([] for i in range(4))


for k,v in symbol_points.items():
    number_of_profit_orders.append(len([ i for i in v if i >= 0]))
    number_of_loss_orders.append(len([i for i in v if i< 0]))
    if all(i >= 0 for i in v):
        profit_orders_average.append(np.average([i for i in v]))
        loss_orders_average.append(0)
    elif all(i <= 0 for i in v):
        profit_orders_average.append(0)
        loss_orders_average.append(np.average([i for i in v]))
    else:
        profit_orders_average.append(np.average([i for i in v if i >=0]))
        loss_orders_average.append(np.average([i for i in v if i < 0]))

sizes_t = symbol_volume.values()
labels_t = symbol_volume.keys()


sizes_less = sorted([10*i for i in sizes_t],reverse = True)#in case the pie is not circle
sizes =sorted(sizes_t,reverse = True)

index_new_dup = []
for p1,i1 in enumerate(sizes):
   for p2,i2 in enumerate(sizes_t):
       if i1 == i2:
           index_new_dup.append(p2)

index_new = list(OrderedDict.fromkeys(index_new_dup))

labels = [labels_t[i] for i in index_new]

colors_material = ['yellowgreen','gold','lightskyblue',
                   'lightcoral','red','teal','mediumpurple','skyblue',
                   'wheat','pink','crimson','plum','salmon',
                   'slateblue','cyan','snow','lightcoral','lime',
                   'gray','thistle','lavender','orange','ghostwhite',
                   'powderblue','chartreuse','m','yellow']
colors_material_ordered = ['r','yellow','cyan','lime']


###################setup the whole figure#########################
fig =plt.figure(figsize =(12,15))
fig.autofmt_xdate()

###################pie chart with symbol##########################
ax1 = plt.subplot2grid((3,2), (1,0))
colors = random.sample(colors_material,len(symbol_volume))
explode = [0.17 for i in range(len(sizes))]
if sum(sizes) < 1:
    patches,texts = plt.pie(sizes_less,colors = colors, startangle = 90,radius = 1.2)
else:
    patches,texts = plt.pie(sizes,colors = colors, startangle = 90,radius = 1.2)
porcent = [ 100*i/sum(sizes) for i in sizes]
legend_labels = ['{0} - {1:1.2f} %'.format(i,j) for i,j in zip(labels, porcent)]
sort_legend = True
if sort_legend:
    patches, labels, dummy =  zip(*sorted(zip(patches, legend_labels, sizes),
                                          key=lambda x: x[2],
                                          reverse=True))
plt.legend(patches, legend_labels, loc='best',fontsize=8)
ax1.set_title('Product Preference',fontsize = 12)


####################bar chart with order numbers###################
ax2 = plt.subplot2grid((3,2), (0,0), colspan=2)
x = np.arange(len(symbol_points))
y1 =np.array(number_of_profit_orders)
y2 = np.array(number_of_loss_orders)

plt.xticks(x,symbol_points.keys())
plt.xlim(0,len(symbol_points))
ax2.set_ylim(-max([max(y2)*1.2,50,max(y1)*1.2]),max([max(y1)*1.2,max(y2)*1.2,50]))
ax2.grid()

rects1 = plt.bar(x-0.25, +y1,width=0.5,color = 'cyan',label = 'Number of profit orders',align='center')
rects2 = plt.bar(x-0.25, -y2,width=0.5,color = 'gold',label = 'Number of loss orders',align='center')
ax2.set_ylabel('Number of Orders', fontsize = 12)


#######################bar chart with average profit################
ax3 = ax2.twinx()
y3 = np.array(profit_orders_average)
y4 = np.array(loss_orders_average)
rects3 = plt.bar(x+0.25, +y3,width=0.5,color = 'lime',label = 'Profit order average pips',align='center')
rects4 = plt.bar(x+0.25, +y4,width=0.5,color = 'red',label = 'Loss order average pips',align='center')
ax3.set_title('Trade Analysis of %s' % client,fontsize = 12)
ax3.set_ylabel('Average Points Per Order', fontsize = 12)
ax3.set_ylim(min([min(y4)*1.5,-max(y3)*1.5,-30]),max([-min(y4)*1.5,max(y3)*1.5,30]))
#add 4 labels in one legend
bar1,label1 = ax2.get_legend_handles_labels()
bar2,label2 = ax3.get_legend_handles_labels()
ax2.legend(bar1+bar2,label1+label2,loc = 'best',fancybox=True,
           shadow=True,ncol = 2,prop={'size':8})
#adjust ax2 ylimit so that v2 in ax2 is aligned to v1 in ax1
def align_yaxis(ax1, v1, ax2, v2):
    _, y1 = ax1.transData.transform((0, v1))
    _, y2 = ax2.transData.transform((0, v2))
    inv = ax2.transData.inverted()
    _, dy = inv.transform((0, 0)) - inv.transform((0, y1-y2))
    miny, maxy = ax2.get_ylim()
    ax2.set_ylim(miny+dy, maxy+dy)
align_yaxis(ax2, 0, ax3, 0)

########################pie chart with holding period####################
ax4 = plt.subplot2grid((3,2), (1,1))
hp_labels = hp_frequency_dict.keys()#hp represents holding period
hp_sizes = hp_frequency_dict.values()
#hp_colors = random.sample(colors_material,8)

hp_patches,hp_texts = plt.pie(hp_sizes,colors = colors_material_ordered, startangle = 90,radius = 1.2)
hp_porcent = [ 100*i/sum(hp_sizes) for i in hp_sizes]
hp_legend_labels = ['{0} - {1:1.2f} %'.format(i,j) for i,j in zip(hp_labels, hp_porcent)]
sort_legend = False
if sort_legend:
    hp_patches, hp_labels, hp_dummy =  zip(*sorted(zip(hp_patches, hp_legend_labels, hp_sizes),
                                          key=lambda x: x[2],
                                          reverse=True))
plt.legend(hp_patches, hp_legend_labels, loc='best',fontsize=8)
ax4.set_title('Holding Period',fontsize = 12)

########################scatter diagram with profit duration################
ax5 = plt.subplot2grid((3,2),(2,0),colspan=2)

x5 = hp_profit_dict.keys()
y5 = hp_profit_dict.values()
ax5.scatter(x5, y5, c = 'black')
ax5.set_title('Duration-Profit Scatter', fontsize = 12)
ax5.set_ylabel('PnL ($)', fontsize = 12)
ax5.set_xlabel('Holding Period (Minutes)', fontsize = 12)
ax5.set_xlim(xmin=0)

lims = int([i for i in plt.gca().get_xlim()][1])
xpositions = range(1440,lims,1440)

for k,i in enumerate(xpositions):
    ax5.axvline(x = i, color = 'k', linestyle = "--", label = "Day Separators" if k == 0 else "")

while max(x5) >= 1440:
    plt.legend(loc = 1,shadow = True, fontsize = 16)
    break

des = most_profitable_order_des(lines,profit_list)
description = "%s %s lot of %s on %s." % tuple(des)

plt.annotate(description, max_value_tuple(hp_profit_dict), xytext = (0.35,0.352),
             textcoords='figure fraction', bbox=dict(boxstyle='round,pad=0.5', fc='yellow', alpha=0.5),
             #firgure fraction use the whole firgure as reference with left bot being 00, right up being 11
             arrowprops=dict(arrowstyle = '->', connectionstyle='arc3,rad=0'))

plt.tight_layout()
plt.show()
