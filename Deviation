from __future__ import division
import MySQLdb
import numpy as np
import re
from time import gmtime, strftime
from datetime import datetime

#define raw inputs
symbol_name = raw_input('Please Enter the Symbol That You Would Like to Check:\t').lower()
start_time = raw_input('Please Inoput the Start Time in yyyy-mm-dd hh:mm:ss:\t')
current_time = strftime("%Y-%m-%d %H:%M:%S", gmtime())
end_time_t = raw_input('Please Input the End Time in yyyy-mm-dd hh-mm-ss. Input \'current time\' if You Wish to Use Current Time:\t')
if end_time_t == 'current time':
    end_time = current_time
else:
    end_time = end_time_t

#extract data from orders report
conn = MySQLdb.connect(host = "localhost", user = "root", passwd = "dealer1073.",
                       db = "####", port = 3306, charset = "utf8")
cur = conn.cursor(cursorclass = MySQLdb.cursors.DictCursor)
cur.execute("select * from orders where Symbol = '%s' and Time between '%s' and '%s'"
            % (symbol_name,start_time,end_time))
open_lines = cur.fetchall()

#extract data from closed trade report
conn = MySQLdb.connect(host = "localhost", user = "root", passwd = "dealer1073.",
                       db = "####", port = 3306, charset = "utf8")
cur = conn.cursor(cursorclass = MySQLdb.cursors.DictCursor)
cur.execute("select * from closed_trade where Symbol = '%s' and ClosedTime between '%s' and '%s'"
            % (symbol_name,start_time,end_time))
closed_lines = cur.fetchall()


conn = MySQLdb.connect(host = "localhost", user = "root", passwd = "dealer1073.",
                       db = "####", port = 3306, charset = "utf8")
cur = conn.cursor(cursorclass = MySQLdb.cursors.DictCursor)
cur.execute("select * from closed_trade where Symbol = '%s' and OpenTime between '%s' and '%s'"
            % (symbol_name,start_time,end_time))
closed_lines_late = cur.fetchall()

G7 = ['audusd','eurusd','gbpusd','usdchf','nzdusd','usdjpy','usdcad']
if 'usd' not in symbol_name or (re.search('usd',symbol_name).span()) == (0,3):
    for symbols in G7:
        if symbol_name[3:] in symbols:
            symbol_name_exchange =  symbols
else:
    symbol_name_exchange = symbol_name

#extract current data
conn = MySQLdb.connect(host = "localhost", user = "root", passwd = "dealer1073.",
                       db = "mt4", port = 3306, charset = "utf8")
cur = conn.cursor(cursorclass = MySQLdb.cursors.DictCursor)
cur.execute("select BID from mt4_prices where SYMBOL = '%s'" % symbol_name_exchange)
#cur.execute("select BID from mt4_prices where SYMBOL ='%s'" % symbol_name)
quote = cur.fetchall()

cur.close()
conn.close()

for quotes in quote:
    if quotes['BID'] > 1:
        ex_rate = quotes['BID']
    elif quotes['BID'] <1:
        ex_rate = 1/quotes['BID']
    
#print quote_aud,quote_chf,quote_cad,quote_jpy,quote_eur,quote_gbp


vol_opensell_t,vol_closedsell_t,vol_openbuy_t,vol_closedbuy_t,vol_opensell_late,vol_openbuy_late = ([] for i in range(6))

for line in open_lines:
    if line['Type']== 'buy':
        vol_openbuy_t.append(line['Volume'])
    else:
        vol_opensell_t.append(line['Volume'])

#gid rid of closed postion which was opened after start time
closed_lines_filterred = [line for line in closed_lines if line['OpenTime'] < datetime.strptime(start_time,"%Y-%m-%d %H:%M:%S")]

closed_line_filterred_late = [line for line in closed_lines_late if line['ClosedTime'] > datetime.strptime(end_time,"%Y-%m-%d %H:%M:%S")]

for line in closed_lines_filterred:
    if line['Type']== 'buy':
        vol_closedbuy_t.append(line['Volume'])
    else:
        vol_closedsell_t.append(line['Volume'])

for line in closed_line_filterred_late:
    if line['Type']== 'buy':
        vol_openbuy_late.append(line['Volume'])
    else:
        vol_opensell_late.append(line['Volume'])

vol_opensell = [float(i.encode('utf')) for i in vol_opensell_t]
vol_closedsell = [float(i.encode('utf')) for i in vol_closedsell_t]
vol_openbuy = [float(i.encode('utf')) for i in vol_openbuy_t]
vol_closedbuy = [float(i.encode('utf')) for i in vol_closedbuy_t]
vol_opensell_l = [float(i.encode('utf')) for i in vol_opensell_late]
vol_openbuy_l = [float(i.encode('utf')) for i in vol_openbuy_late]

vol_at_bid = sum(vol_opensell) + sum(vol_closedbuy) + sum(vol_opensell_l)
vol_at_ask = sum(vol_openbuy) + sum(vol_closedsell) + sum(vol_openbuy_l)

deviation_factor = float(raw_input('Please Inpute the deviation in pips(dollars for bullions):\t'))

def caculate_value(bidvol,askvol,df):
    realised_value = df*(askvol-bidvol)
    return realised_value

if 'usd' in symbol_name and (re.search('usd',symbol_name).span()) == (3,6):
    if 'xau' in symbol_name:
        outcome = round(caculate_value(vol_at_bid,vol_at_ask,deviation_factor)*100,2)
    elif 'xag' in symbol_name:
        outcome = round(caculate_value(vol_at_bid,vol_at_ask,deviation_factor)*5000,2)
    else:
        outcome = round(caculate_value(vol_at_bid,vol_at_ask,deviation_factor)*10,2)        
elif 'usd' not in symbol_name or (re.search('usd',symbol_name).span()) == (0,3):
    if 'jpy' in symbol_name:
        outcome = round(caculate_value(vol_at_bid,vol_at_ask,deviation_factor)*1000/float(ex_rate),2)
    else:
        outcome = round(caculate_value(vol_at_bid,vol_at_ask,deviation_factor)*10/float(ex_rate),2)

total_open_buy = round(sum(vol_openbuy)+sum(vol_openbuy_l),2)
total_open_sell = round(sum(vol_opensell)+sum(vol_opensell_l),2)
total_closed_buy = round(sum(vol_closedbuy),2)
total_closed_sell = round(sum(vol_closedsell),2)


print 'Total Open Buy: %r' %(total_open_buy)
print 'Total Open Sell: %r' %(total_open_sell)
print 'Total Closed Buy: %r' %(total_closed_buy)
print 'Total Closed Sell: %r' %(total_closed_sell)

#print ex_rate
        
print 'The outcome from this deviation in dollar value is:\t %s' % (outcome)


