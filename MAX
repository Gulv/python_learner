from __future__ import division
import MySQLdb
import numpy as np
import re
from time import gmtime, strftime
from datetime import datetime,timedelta
import matplotlib.pyplot as plt

#select client's closed trades and open positions

client,server = str(raw_input('Please enter the client and server that you want to look up:\t')).split(',')

conn = MySQLdb.connect(host = "localhost", user = "root", passwd = "Aetos1234",
                       db = "ctr_db", port = 3306, charset = "utf8")

cur = conn.cursor(cursorclass = MySQLdb.cursors.SSCursor)

cur.execute("select Deal,Symbol,Type,Volume,Open_Time,Close_Time\
            from %s where Login = '%s'" % (server,client))

symbol,Type,volume,open_time,close_time,duration = [[]for i in range(6)]
for i in cur.fetchall():
    symbol.append(i[1])
    Type.append(i[2])
    volume.append(float(i[3]))
    open_time.append(i[4])
    close_time.append(i[5])
    duration.append((i[4],i[5]))

'''
conn = MySQLdb.connect(host = "localhost", user = "root", passwd = "Aetos1234",
                       db = "aetos", port = 3306, charset = "utf8")

cur = conn.cursor(cursorclass = MySQLdb.cursors.SSCursor)
cur.execute("select timestampdiff(second,timestamp('%s'),Time) as OD,\
                    Volume from orders where Login = '%s'" % (reg_date + ' 00:00:00',client))

for i in cur.fetchall():
    duration.append((int(i[0]),9999999))
    volume.append(float(i[1]))
'''
cur.close()
conn.close()

#duration_position_dict = dict(zip(duration,volume))

optime_sv = {}






volume_new = [0] * len(duration)



for j in range(len(open_time)):
    for i in range(len(open_time)):
        if open_time[j]>= duration[i][0] and open_time[j] <= duration[i][1]:
            volume_symbol = []
            if (open_time[j],symbol[i]) not in optime_sv.keys():
                optime_sv.update({(open_time[j],symbol[i]):volume_symbol.append(volume[i])})
            else:
                optime_sv.update({})
            
            if (symbol[i],Type[i]) not in symbol_volume.keys():
                volume_new = 
                symbol_volume.update{(symbol[i],Type[i]): volume[i]}
            else:
                symbol_volume.update{(symbol[i],Type[i]): volume[i]}




            
            if Symbol[i] != Symbol[j] or Type[i] == Type[j]:
                volume_new[j] += Volume[i]

print max(Volume_new)

'''
origin_time = datetime.strptime(reg_date + ' 00:00:00', '%Y-%m-%d %H:%M:%S')
time_reference = [origin_time + timedelta(seconds = i) for i in range(ruler[0],ruler[1]+1)]
'''
fig = plt.figure(figsize=(11,8))
ax1 = fig.add_subplot(111)

y = np.array(Open_time)
x = np.array(Volume_new)
plt.plot(y,x)

fig.autofmt_xdate()

plt.tight_layout()
plt.show()
