from __future__ import division
import MySQLdb
import numpy as np
import random
import re
from time import gmtime, strftime
from datetime import datetime
import matplotlib.pyplot as plt
from collections import Counter
from collections import OrderedDict


conn = MySQLdb.connect(host = "localhost", user = "root", passwd = "dealer1073.",
                       db = "aetos", port = 3306, charset = "utf8")
cur = conn.cursor(cursorclass = MySQLdb.cursors.DictCursor)

client = raw_input('Please Enter the Client That You Would Like to Check:\t')
cur.execute("select * from closed_trade where Login = %r " % (client))

#cur.execute('select * from client_statement')
lines = cur.fetchall()

symbol_index = ['audusd','eurusd','gbpusd','usdjpy','usdcad','usdchf','nzdusd',
                'audcad','audchf','audjpy','audnzd','cadchf','cadjpy','chfjpy',
                'euraud','eurcad','eurchf','eurgbp','eurjpy','eurnzd','gbpaud',
                'gbpchf','gbpcad','gbpjpy','gbpnzd','nzdjpy','xauusd','xagusd',
                'usoil','ukoil','ngas','us30','nas100','spx500','copper','dxy',
                'uk100','jpn225','hkh40','hkg50','palladium','platinum','aus200',
                'agricultural','xaueur','xageur','others']

volume_index = [[] for i in range(len(symbol_index))]
points_index = [[] for i in range(len(symbol_index))]

for line in lines:
    if line['Symbol'] in symbol_index:
        volume_index[symbol_index.index(line['Symbol'])].append(line['Volume'])
        points_index[symbol_index.index(line['Symbol'])].append(line['Pip']/10)
    elif line['Symbol'] == 'cocoa' or 'sugar' or 'coffee' or 'cotton' or 'livecattle' or\
         'corn' or 'soybeans' or 'wheat' or 'soybeanoil': 
        volume_index[symbol_index.index('agricultural')].append(line['Volume'])
        points_index[symbol_index.index('agricultural')].append(line['Pip']/10)                
    else:
        volume_index[symbol_index.index('others')].append(line['Volume'])
        points_index[symbol_index.index('others')].append(line['Pip']/10)

for i in range(len(volume_index)):
    volume_index[i] = [sum(float(k.encode('utf')) for k in volume_index[i])]
    #points_index[i] = [sum(float(k.encode('utf')) for k in point_index[i])]

symbol_volume = dict(zip(symbol_index,volume_index))
symbol_points = dict(zip(symbol_index,points_index))


def drop_empty(data_dict):
    for k,v in data_dict.items():
        if v == [0] or v ==[]:
            del data_dict[k]
            
drop_empty(symbol_volume)
drop_empty(symbol_points)

number_of_profit_orders,number_of_loss_orders,profit_orders_average,loss_orders_average= ([] for i in range(4))


for k,v in symbol_points.items():
    number_of_profit_orders.append(len([ i for i in v if i >= 0]))
    number_of_loss_orders.append(len([i for i in v if i< 0]))
    if all(i >= 0 for i in v):
        profit_orders_average.append(np.average([i for i in v]))
        loss_orders_average.append(0)
    elif all(i <= 0 for i in v):
        profit_orders_average.append(0)
        loss_orders_average.append(np.average([i for i in v]))
    else:
        profit_orders_average.append(np.average([i for i in v if i >=0]))
        loss_orders_average.append(np.average([i for i in v if i < 0]))

sizes_t = symbol_volume.values()
labels_t = [i for i in symbol_volume.keys()]
sizes_t2 = sorted([sum(i) for i in sizes_t],reverse = True)
#sizes_t3 = sorted([i for i in sizes_t],reverse = True)
sizes_t3 = sorted([i for i in sizes_t if sum(i) > sum(sizes_t2)/100],reverse = True)

sizes =sorted([sum(i) for i in sizes_t3],reverse = True)

#sizes = sorted(sizes_t,reverse = True)

index_new_dup = []
for p1,i1 in enumerate(sizes_t3):
   for p2,i2 in enumerate(sizes_t):
       if i1 == i2:
           index_new_dup.append(p2)

index_new = list(OrderedDict.fromkeys(index_new_dup))

labels = [labels_t[i] for i in index_new]
                                 
#labels.append(labels_t[sizes_t.index(sizes_tem[i])])

colors_material = ['yellowgreen','gold','lightskyblue',
                   'lightcoral','red','teal','mediumpurple','skyblue',
                   'wheat','pink','crimson','plum','salmon',
                   'slateblue','cyan','snow','lightcoral','lime',
                   'gray','thistle','lavender','orange','ghostwhite',
                   'powderblue','chartreuse','gray','yellow']
colors = random.sample(colors_material,len(symbol_volume))
explode = [0.17 for i in range(len(sizes))]


fig =plt.figure(figsize =(20,20))
ax1 = fig.add_subplot(211)
patches,texts = plt.pie(sizes,colors = colors, explode = explode, startangle = 90,radius = 1.2)
porcent = [ 100*i/sum(sizes) for i in sizes]
legend_labels = ['{0} - {1:1.2f} %'.format(i,j) for i,j in zip(labels, porcent)]

sort_legend = True
if sort_legend:
    patches, labels, dummy =  zip(*sorted(zip(patches, legend_labels, sizes),
                                          key=lambda x: x[2],
                                          reverse=True))
plt.legend(patches, legend_labels, loc='best',fontsize=12)

ax2 = fig.add_subplot(212)
x = np.arange(len(symbol_points))
y1 =np.array(number_of_profit_orders)
y2 = np.array(number_of_loss_orders)

plt.bar(x, +y1,color = 'blue')
plt.bar(x, -y2,color = 'red')

#plt.axis('equal')
#plt.tight_layout()

plt.show()
