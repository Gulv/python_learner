from __future__ import division
import MySQLdb
import numpy as np
import random
import re
from time import gmtime, strftime
from datetime import datetime
import matplotlib.pyplot as plt
from collections import Counter
from collections import OrderedDict


conn = MySQLdb.connect(host = "localhost", user = "root", passwd = "dealer1073.",
                       db = "aetos", port = 3306, charset = "utf8")
cur = conn.cursor(cursorclass = MySQLdb.cursors.DictCursor)

client = raw_input('Please Enter the Client That You Would Like to Check:\t')
cur.execute("select * from closed_trade where Login = %r " % (client))

#cur.execute('select * from client_statement')
lines = cur.fetchall()

symbol_index = ['audusd','eurusd','gbpusd','usdjpy','usdcad','usdchf','nzdusd',
                'audcad','audchf','audjpy','audnzd','cadchf','cadjpy','chfjpy',
                'euraud','eurcad','eurchf','eurgbp','eurjpy','eurnzd','gbpaud',
                'gbpchf','gbpcad','gbpjpy','gbpnzd','nzdjpy','xauusd','xagusd',
                'usoil','ukoil','ngas','us30','nas100','spx500','copper','dxy',
                'uk100','jpn225','hkh40','hkg50','palladium','platinum','aus200',
                'agricultural','xaueur','xageur','others']

volume_index = [[] for i in range(len(symbol_index))]
points_index = [[] for i in range(len(symbol_index))]

for line in lines:
    if line['Symbol'] in symbol_index:
        volume_index[symbol_index.index(line['Symbol'])].append(line['Volume'])
        points_index[symbol_index.index(line['Symbol'])].append(line['Pip']/10)
    elif line['Symbol'] == 'cocoa' or 'sugar' or 'coffee' or 'cotton' or 'livecattle' or\
         'corn' or 'soybeans' or 'wheat' or 'soybeanoil': 
        volume_index[symbol_index.index('agricultural')].append(line['Volume'])
        points_index[symbol_index.index('agricultural')].append(line['Pip']/10)                
    else:
        volume_index[symbol_index.index('others')].append(line['Volume'])
        points_index[symbol_index.index('others')].append(line['Pip']/10)

for i in range(len(volume_index)):
    volume_index[i] = [sum(float(k.encode('utf')) for k in volume_index[i])]
    #points_index[i] = [sum(float(k.encode('utf')) for k in point_index[i])]

symbol_volume = dict(zip(symbol_index,volume_index))
symbol_points = dict(zip(symbol_index,points_index))

def reform_volume(data_dict):
    for k,v in data_dict.items():
        data_dict.update({k:sum(v)})
        
def sort_volume(data_dict):
    for k,v in data_dict.items():
        if v ==0:
            del data_dict[k]
        elif 100*v < sum(symbol_volume.values()):
            del data_dict[k]
            
def drop_outliers(data_dict,reflection_dict):
    for k,v in data_dict.items():
            if k not in reflection_dict.keys():
                del data_dict[k]

    
reform_volume(symbol_volume)
sort_volume(symbol_volume)            
drop_outliers(symbol_points,symbol_volume)

number_of_profit_orders,number_of_loss_orders,profit_orders_average,loss_orders_average= ([] for i in range(4))


for k,v in symbol_points.items():
    number_of_profit_orders.append(len([ i for i in v if i >= 0]))
    number_of_loss_orders.append(len([i for i in v if i< 0]))
    if all(i >= 0 for i in v):
        profit_orders_average.append(np.average([i for i in v]))
        loss_orders_average.append(0)
    elif all(i <= 0 for i in v):
        profit_orders_average.append(0)
        loss_orders_average.append(np.average([i for i in v]))
    else:
        profit_orders_average.append(np.average([i for i in v if i >=0]))
        loss_orders_average.append(np.average([i for i in v if i < 0]))

sizes_t = symbol_volume.values()
labels_t = symbol_volume.keys()
sizes =sorted(sizes_t,reverse = True)

index_new_dup = []
for p1,i1 in enumerate(sizes):
   for p2,i2 in enumerate(sizes_t):
       if i1 == i2:
           index_new_dup.append(p2)

index_new = list(OrderedDict.fromkeys(index_new_dup))

labels = [labels_t[i] for i in index_new]
                                 
#labels.append(labels_t[sizes_t.index(sizes_tem[i])])

colors_material = ['yellowgreen','gold','lightskyblue',
                   'lightcoral','red','teal','mediumpurple','skyblue',
                   'wheat','pink','crimson','plum','salmon',
                   'slateblue','cyan','snow','lightcoral','lime',
                   'gray','thistle','lavender','orange','ghostwhite',
                   'powderblue','chartreuse','m','yellow']
colors = random.sample(colors_material,len(symbol_volume))
explode = [0.17 for i in range(len(sizes))]

fig =plt.figure(figsize =(10,10))
fig.autofmt_xdate()
ax1 = fig.add_subplot(211)
patches,texts = plt.pie(sizes,colors = colors, startangle = 90,radius = 1.2)
porcent = [ 100*i/sum(sizes) for i in sizes]
legend_labels = ['{0} - {1:1.2f} %'.format(i,j) for i,j in zip(labels, porcent)]

sort_legend = True
if sort_legend:
    patches, labels, dummy =  zip(*sorted(zip(patches, legend_labels, sizes),
                                          key=lambda x: x[2],
                                          reverse=True))
plt.legend(patches, legend_labels, loc='best',fontsize=12)

#bar chart with order numbers
ax2 = fig.add_subplot(212)
x = np.arange(len(symbol_points))
y1 =np.array(number_of_profit_orders)
y2 = np.array(number_of_loss_orders)

plt.xticks(x,symbol_points.keys())
plt.xlim(0,len(symbol_points))
ax2.set_ylim(-max([max(y2)*1.2,50,max(y1)*1.2]),max([max(y1)*1.2,max(y2)*1.2,50]))
ax2.grid()

rects1 = plt.bar(x-0.25, +y1,width=0.5,color = 'blue',label = 'Number of profit orders',align='center')
rects2 = plt.bar(x-0.25, -y2,width=0.5,color = 'red',label = 'Number of loss orders',align='center')
ax2.set_xlabel('Symbol',fontsize = 12)
ax2.set_ylabel('Number of Orders', fontsize = 12)
#ax2.legend(loc = 0,shadow = True, fontsize = 12)

#bar chart with average profit
ax3 = ax2.twinx()
y3 = np.array(profit_orders_average)
y4 = np.array(loss_orders_average)
rects3 = plt.bar(x+0.25, +y3,width=0.5,color = 'yellow',label = 'Profit order average pips',align='center')
rects4 = plt.bar(x+0.25, +y4,width=0.5,color = 'green',label = 'Loss order average pips',align='center')
ax3.set_title('Trade Analysis of %s' % client,fontsize = 12)
ax3.set_ylabel('Average Points Per Order', fontsize = 12)
#ax3.legend(loc = 1,shadow = True, fontsize = 12)
ax3.set_ylim(min([min(y4)*1.5,-max(y3)*1.5,-30]),max([-min(y4)*1.5,max(y3)*1.5,30]))

#add 4 labels in one legend
bar1,label1 = ax2.get_legend_handles_labels()
bar2,label2 = ax3.get_legend_handles_labels()
ax2.legend(bar1+bar2,label1+label2,loc = 0)

#adjust ax2 ylimit so that v2 in ax2 is aligned to v1 in ax1
def align_yaxis(ax1, v1, ax2, v2):
    _, y1 = ax1.transData.transform((0, v1))
    _, y2 = ax2.transData.transform((0, v2))
    inv = ax2.transData.inverted()
    _, dy = inv.transform((0, 0)) - inv.transform((0, y1-y2))
    miny, maxy = ax2.get_ylim()
    ax2.set_ylim(miny+dy, maxy+dy)






align_yaxis(ax2, 0, ax3, 0)

plt.tight_layout()

plt.show()
